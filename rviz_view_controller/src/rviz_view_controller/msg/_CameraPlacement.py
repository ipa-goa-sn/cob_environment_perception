"""autogenerated by genpy from rviz_view_controller/CameraPlacement.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import std_msgs.msg

class CameraPlacement(genpy.Message):
  _md5sum = "3e98482bd25a3c256cff65ec2312e8d0"
  _type = "rviz_view_controller/CameraPlacement"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# The interpolation mode to use during this step
uint8 interpolation_mode
uint8 LINEAR    = 0 # Positions will be linearly interpolated
uint8 SPHERICAL = 1 # Position and orientation will be interpolated in a spherical sense.

# Sets this as the camera attached (fixed) frame before movement.
# An empty string will leave the attached frame unchanged. 
string attached_frame

# When should this pose be reached?
duration time_from_start

# The frame-relative point for the camera.
geometry_msgs/PointStamped eye

# The frame-relative point for the focus (or pivot for an Orbit controller).
geometry_msgs/PointStamped focus

# The frame-relative vector that maps to "up" in the view plane.
# The zero-vector will default to +Z in the camera fixed_frame.
geometry_msgs/Vector3Stamped up


================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  LINEAR = 0
  SPHERICAL = 1

  __slots__ = ['interpolation_mode','attached_frame','time_from_start','eye','focus','up']
  _slot_types = ['uint8','string','duration','geometry_msgs/PointStamped','geometry_msgs/PointStamped','geometry_msgs/Vector3Stamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       interpolation_mode,attached_frame,time_from_start,eye,focus,up

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraPlacement, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.interpolation_mode is None:
        self.interpolation_mode = 0
      if self.attached_frame is None:
        self.attached_frame = ''
      if self.time_from_start is None:
        self.time_from_start = genpy.Duration()
      if self.eye is None:
        self.eye = geometry_msgs.msg.PointStamped()
      if self.focus is None:
        self.focus = geometry_msgs.msg.PointStamped()
      if self.up is None:
        self.up = geometry_msgs.msg.Vector3Stamped()
    else:
      self.interpolation_mode = 0
      self.attached_frame = ''
      self.time_from_start = genpy.Duration()
      self.eye = geometry_msgs.msg.PointStamped()
      self.focus = geometry_msgs.msg.PointStamped()
      self.up = geometry_msgs.msg.Vector3Stamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.interpolation_mode))
      _x = self.attached_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i3I.pack(_x.time_from_start.secs, _x.time_from_start.nsecs, _x.eye.header.seq, _x.eye.header.stamp.secs, _x.eye.header.stamp.nsecs))
      _x = self.eye.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.eye.point.x, _x.eye.point.y, _x.eye.point.z, _x.focus.header.seq, _x.focus.header.stamp.secs, _x.focus.header.stamp.nsecs))
      _x = self.focus.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.focus.point.x, _x.focus.point.y, _x.focus.point.z, _x.up.header.seq, _x.up.header.stamp.secs, _x.up.header.stamp.nsecs))
      _x = self.up.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.up.vector.x, _x.up.vector.y, _x.up.vector.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.time_from_start is None:
        self.time_from_start = genpy.Duration()
      if self.eye is None:
        self.eye = geometry_msgs.msg.PointStamped()
      if self.focus is None:
        self.focus = geometry_msgs.msg.PointStamped()
      if self.up is None:
        self.up = geometry_msgs.msg.Vector3Stamped()
      end = 0
      start = end
      end += 1
      (self.interpolation_mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.attached_frame = str[start:end].decode('utf-8')
      else:
        self.attached_frame = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.time_from_start.secs, _x.time_from_start.nsecs, _x.eye.header.seq, _x.eye.header.stamp.secs, _x.eye.header.stamp.nsecs,) = _struct_2i3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.eye.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.eye.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.eye.point.x, _x.eye.point.y, _x.eye.point.z, _x.focus.header.seq, _x.focus.header.stamp.secs, _x.focus.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.focus.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.focus.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.focus.point.x, _x.focus.point.y, _x.focus.point.z, _x.up.header.seq, _x.up.header.stamp.secs, _x.up.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.up.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.up.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.up.vector.x, _x.up.vector.y, _x.up.vector.z,) = _struct_3d.unpack(str[start:end])
      self.time_from_start.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.interpolation_mode))
      _x = self.attached_frame
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i3I.pack(_x.time_from_start.secs, _x.time_from_start.nsecs, _x.eye.header.seq, _x.eye.header.stamp.secs, _x.eye.header.stamp.nsecs))
      _x = self.eye.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.eye.point.x, _x.eye.point.y, _x.eye.point.z, _x.focus.header.seq, _x.focus.header.stamp.secs, _x.focus.header.stamp.nsecs))
      _x = self.focus.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d3I.pack(_x.focus.point.x, _x.focus.point.y, _x.focus.point.z, _x.up.header.seq, _x.up.header.stamp.secs, _x.up.header.stamp.nsecs))
      _x = self.up.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3d.pack(_x.up.vector.x, _x.up.vector.y, _x.up.vector.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.time_from_start is None:
        self.time_from_start = genpy.Duration()
      if self.eye is None:
        self.eye = geometry_msgs.msg.PointStamped()
      if self.focus is None:
        self.focus = geometry_msgs.msg.PointStamped()
      if self.up is None:
        self.up = geometry_msgs.msg.Vector3Stamped()
      end = 0
      start = end
      end += 1
      (self.interpolation_mode,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.attached_frame = str[start:end].decode('utf-8')
      else:
        self.attached_frame = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.time_from_start.secs, _x.time_from_start.nsecs, _x.eye.header.seq, _x.eye.header.stamp.secs, _x.eye.header.stamp.nsecs,) = _struct_2i3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.eye.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.eye.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.eye.point.x, _x.eye.point.y, _x.eye.point.z, _x.focus.header.seq, _x.focus.header.stamp.secs, _x.focus.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.focus.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.focus.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.focus.point.x, _x.focus.point.y, _x.focus.point.z, _x.up.header.seq, _x.up.header.stamp.secs, _x.up.header.stamp.nsecs,) = _struct_3d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.up.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.up.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.up.vector.x, _x.up.vector.y, _x.up.vector.z,) = _struct_3d.unpack(str[start:end])
      self.time_from_start.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3d3I = struct.Struct("<3d3I")
_struct_B = struct.Struct("<B")
_struct_3d = struct.Struct("<3d")
_struct_2i3I = struct.Struct("<2i3I")
