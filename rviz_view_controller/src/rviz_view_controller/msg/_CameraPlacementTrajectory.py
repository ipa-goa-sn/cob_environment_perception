"""autogenerated by genpy from rviz_view_controller/CameraPlacementTrajectory.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class CameraPlacementTrajectory(genpy.Message):
  _md5sum = "27466bf9ab9f1c814775dfe3d1dac5b1"
  _type = "rviz_view_controller/CameraPlacementTrajectory"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# When to start the camera placement trajectory
# (There is no header here because the frame is specified per-camera-placement.)
time start_time

# The vector of camera placements
# An empty vector can be sent if this message is being used to
# just send changes to the control parameters.
#rviz_view_controllers/CameraPlacement[] placements

# The interaction style that should be activated when movement is done.
uint8 mouse_interaction_mode
uint8 NO_CHANGE = 0 # Leaves the control style unchanged
uint8 ORBIT = 1 # Activates the Orbit-style controller
uint8 FPS   = 2 # Activates the FPS-style controller

# A flag to enable or disable user interaction
bool interaction_enabled

# A flag indicating if the camera yaw axis is fixed to +Z of the camera attached_frame
bool maintain_fixed_up_axis
 


"""
  # Pseudo-constants
  NO_CHANGE = 0
  ORBIT = 1
  FPS = 2

  __slots__ = ['start_time','mouse_interaction_mode','interaction_enabled','maintain_fixed_up_axis']
  _slot_types = ['time','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start_time,mouse_interaction_mode,interaction_enabled,maintain_fixed_up_axis

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CameraPlacementTrajectory, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start_time is None:
        self.start_time = genpy.Time()
      if self.mouse_interaction_mode is None:
        self.mouse_interaction_mode = 0
      if self.interaction_enabled is None:
        self.interaction_enabled = False
      if self.maintain_fixed_up_axis is None:
        self.maintain_fixed_up_axis = False
    else:
      self.start_time = genpy.Time()
      self.mouse_interaction_mode = 0
      self.interaction_enabled = False
      self.maintain_fixed_up_axis = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I3B.pack(_x.start_time.secs, _x.start_time.nsecs, _x.mouse_interaction_mode, _x.interaction_enabled, _x.maintain_fixed_up_axis))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start_time is None:
        self.start_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.start_time.secs, _x.start_time.nsecs, _x.mouse_interaction_mode, _x.interaction_enabled, _x.maintain_fixed_up_axis,) = _struct_2I3B.unpack(str[start:end])
      self.interaction_enabled = bool(self.interaction_enabled)
      self.maintain_fixed_up_axis = bool(self.maintain_fixed_up_axis)
      self.start_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I3B.pack(_x.start_time.secs, _x.start_time.nsecs, _x.mouse_interaction_mode, _x.interaction_enabled, _x.maintain_fixed_up_axis))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start_time is None:
        self.start_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.start_time.secs, _x.start_time.nsecs, _x.mouse_interaction_mode, _x.interaction_enabled, _x.maintain_fixed_up_axis,) = _struct_2I3B.unpack(str[start:end])
      self.interaction_enabled = bool(self.interaction_enabled)
      self.maintain_fixed_up_axis = bool(self.maintain_fixed_up_axis)
      self.start_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I3B = struct.Struct("<2I3B")
